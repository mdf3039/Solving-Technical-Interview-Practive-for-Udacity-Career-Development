This is the README of the Technical Interview Practice for Udacity's Career Development. There are five questions. Each question will be listed along with a text explanation of the efficiency of the code and design choice.
*Python 2.7 is needed to run all code. Each function in Python has three test runs.

Question 1: Given two strings s and t, determine whether some anagram of t is a substring of s. For example: if s = "udacity" and t = "ad", then the function returns True. Your function definition should look like: question1(s, t) and return a boolean True or False.
Answer: This was written in one line of code, so the code is really efficient. I used an if else statement. 
Efficiency: There is just one line of code that needs to run once so efficiency is O(1).
*No additional libraries were used.

Question 2: Given a string a, find the longest palindromic substring contained in a. Your function definition should look like question2(a), and return a string.
Answer: First, I created an empty list to put the palindrome. Then, I made sure all of the letters in the string were lower cased. Since I am searching for the longest, it makes sense to search the entire string for a palindrome, then decrease the characters by one and search each substring within the string. This needs to continue until palindrome(s) is found. Once found, the loop adds the palindrome to the empty list, but the loop needs to continue to make sure there aren't any other palindromes in substrings of equal length. The loop adds other palindromes of equal length to the list. Then the code can stop running, or break. Then return 'There is no palindrome!' if there aren't any palindromes, else return the list of the largest palindrome(s). 
Efficiency: The first two statements and the last statement in the function only need to be run once so O(3) can be added to the result. The for loops first take the string of length n and search for palindrome. This requires 5 lines of code in the best scenario, so the effiiency in the best scenario where the whole string is a palindrome is O(3+5)=O(8). In the worst scenario, where there is not a palindrome, it takes two lines of code to search for the palindrome and one line of code to attempt to stop. Therefore, for a string with n characters, unsucessfully checking if the entire string is a palindrome takes 1*2+1. For n-1 of the characters, it takes 2*2+1. n-2 characters takes 3*2+1 ... n-(n-2)=2 characters takes n-1*2+1. Therefore the worst case scenario has an efficiency of O(2*summation(from 1 to n-1)+n+2)=O(2*summation(from 2 to n)-n).
*No additional libraries were used.

Question 3: Given an undirected graph G, find the minimum spanning tree within G. A minimum spanning tree connects all vertices in a graph with the smallest possible total weight of edges. Your function should take in and return an adjacency list structured like this:
{'A':[('B',2)], 'B':[('A',2),('C',5)], 'C':[('B',5)]}
Vertices are represented as unique strings. The function definition should be question3(G).
Answer: The minimum spanning tree must connect all vertices. Therefore each vertex must connect to another vertex. I create an empty dictionary and a set with 0, the first index, in the set. I get the adjacency matrix from the graph and convert it to a numpy array matrix. I make sure all of my diagonals are zero and then find the vertex with the lowest edge that connects to vertex 0. I created a function that adds the connection to the dictionary. The function also makes the corresponding columns of the vertices equal to 0 and adds the vertices to the set. I then created a loop that runs until all of the vertices are in the dictionary. The loop takes the rows of the matrix that correspond to the vertices in the set. Then the loop finds a the smallest edge that connects a vertex not in the set to the other vertices in the set. It then uses the function addtodict to add the vertex to the dictionary and set. It returns the dictionary when finished. 
Efficiency: I will assume the graph is connected with more than one vertex. The first three lines need to be run once so O(3). The n diagonals of the n*n matrix must be converted to zero, so O(n+3). The try statement needs to be run once, so O(n+4). The initial addtodict of the first two vertices in the dictionary will take 8 lines; the others will take 7 since one of the vertices is always in the dictionary. So O(n+12). The while loop will not stop until there are n indices in the dictionary. Therefore it will run n-2 times. It goes through three lines of code that only need to be run once and the addtodict function. Therefore, the while loop will take 10*(n-2), so O(n+12+10*(n-2))=O(11n-8). There is one more line of code that returns the list so O(11n-7).
*Python libraries numpy and random, also Python file class_graph.py (attachment given) needed and imported to run the code.

Question 4: Find the least common ancestor between two nodes on a binary search tree. The least common ancestor is the farthest node from the root that is an ancestor of both nodes. For example, the root is a common ancestor of all nodes on the tree, but if both nodes are descendents of the root's left child, then that left child might be the lowest common ancestor. You can assume that both nodes are in the tree, and the tree itself adheres to all BST properties. The function definition should look like question4(T, r, n1, n2), where T is the tree represented as a matrix, where the index of the list is equal to the integer stored in that node and a 1 represents a child node, r is a non-negative integer representing the root, and n1 and n2 are non-negative integers representing the two nodes in no particular order. For example, one test case might be
question4([[0, 1, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [1, 0, 0, 0, 1],
           [0, 0, 0, 0, 0]],
          3,
          1,
          4)
and the answer would be 3.
Answer: Create two sets, one for each node. Put the node in its set. Create veriables that maintains the lowest level of both sets. Create a loop that does not stop until the intersection of the two sets is not empty. For each set, the loop finds the parent of the lowest level node and puts the parent in the set. Once the loop is finished, return the node that is the intersection of the two sets. This is the least common ancestor.
Efficiency: Assume the tree is connected. The first 5 lines of code only need to be run once, so O(5). Worst case scenario, the while loop will run n-1 times, where n*n is the size of the matrix. There are five lines of code processed in the while loop for each iteration so O(5+5*(n-1))=O(5n). Then there is the last return line, so O(5n+1).
*Python library numpy needed and imported to run the code.

Question 5: Find the element in a singly linked list that's m elements from the end. For example, if a linked list has 5 elements, the 3rd element from the end is the 3rd element. The function definition should look like question5(ll, m), where ll is the first node of a linked list and m is the "mth number from the end". You should copy/paste the Node class below to use as a representation of a node in the linked list. Return the value of the node at that position.
class Node(object):
  def __init__(self, data):
    self.data = data
    self.next = None
Answer: The Node class along with the LinkedList class is contained in the file linked_list.py, which is needed and imported to complete question 5. First, I make sure the value of m is more than 0. If not, it returns an error message. Then I set a counter at 1 and find the head of the list. I create a while loop to scroll through the linked list until it reaches the end. The loop also adds one to the counter every time it reaches a new node. I make sure m is not larger than the counter, or number of nodes in the linked list. If it is not, the function returns the data of the mth node from the end.
Efficiency: Assume 0<m<=n where n is the number of nodes in the linked list. The function goes through four lines of code before reaching the while loop. So O(4). The while loop runs n-1 times with two lines, so O(4+2*(n-1))=O(2n+2). Two lines of code are processed after that so O(2n+4). But the last line also has a get_position function in the line, so the efficiency of that function must be calculated. In the worst case scenario, you are getting the data from the last node. The first three lines of code in the get_position function only need to be run once, so O(2n+7). The while loop runs n-1 times. For n-2 times, there are three lines of code that only need to be run once, so O(2n+7+3*(n-2))=O(5n+1). The last loop in the while loop runs two lines, so O(5n+3). 
*Python file class_graph.py (attachment given) needed and imported to run the code.