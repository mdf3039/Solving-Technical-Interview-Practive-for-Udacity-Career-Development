Question 1: Given two strings s and t, determine whether some anagram of t is a substring of s. For example: if s = "udacity" and t = "ad", then the function returns True. Your function definition should look like: question1(s, t) and return a boolean True or False.
Answer: I lowercased all letters and got rid of the spaces. For the smaller string t, I filled a dictionary where the letters in t are indices and the count of the letters were the entries. For each substring in s of length t, I created a dictionary and filled it similar to the t dictionary. Then I return True if one of those dictionaries are equal to t, False if not. 
Efficiency(time): Worst case scenario, the function runs through six lines of code before it gets to the first for loop, so O(6). Then it loops for the length of t, which I know can't be bigger than the length of s, so O(m+6), where m is the length of t and n is the length of s. For each substring in s of length t (n-m), run 2 lines of code, another for loop of length m, and one more line of code. Therefore, O(m+6+(n-m)(2+m+1))=O(m+6+nm+3n-m^2-3m)=O(nm+3n-m^2-2m+6). There is one more line for return, so O(nm+3n-m^2-2m+7). When n=m, O(n+7)=O(n). When m=1, O(4n+4)=O(n). When m=n/2, O(n^2/4+2n+7) = O(n^2). Therefore, worst case scenario, O(n^2).
Efficiency(space): The first space created is a dictionary of length m, then a substring, then a dictionary of length n-m. So O(m+1+n-m)=O(n).
*No additional libraries were used.

Question 2: Given a string a, find the longest palindromic substring contained in a. Your function definition should look like question2(a), and return a string.
Answer: Since the longest is what the question wants, I do not start my function off with one letter, but I search the entire string for a palindrome. Then I search the 2 subsets of n-1 length, the three subsets of n-2 length, and so on and so on until the n subsets of length 1. The first one is taken and returned. 
Efficiency(time): The worst case scenario. The first three statements in the function only need to be run once so O(3). The for loops first take the string of length n and search for palindrome. This requires 4 lines of code in the best scenario, so the effiiency in the best scenario where the whole string is a palindrome is O(3+4)=O(4). In the worst scenario, where there is not a palindrome, it takes two lines of code to search for the palindrome and one line of code to attempt to stop. Therefore, for a string with n characters, unsucessfully checking if the entire string is a palindrome takes 1*2+1. For n-1 of the characters, it takes 2*2+1. n-2 characters takes 3*2+1 ... n-(n-2)=2 characters takes n-1*2+1. When it reaches one character, it returns the first letter so only takes 5 lines. Therefore the worst case scenario has an efficiency of O(2*summation(from 1 to n-1)+n+2+5)=O(n(n-1)+n+7)=O(n^2).
Efficiency(space): The only space it uses is for the palindrome and checker, so O(2) = O(1).
*No additional libraries were used.

Question 3: Given an undirected graph G, find the minimum spanning tree within G. A minimum spanning tree connects all vertices in a graph with the smallest possible total weight of edges. Your function should take in and return an adjacency list structured like this:
{'A':[('B',2)], 'B':[('A',2),('C',5)], 'C':[('B',5)]}
Vertices are represented as unique strings. The function definition should be question3(G).
Answer: I create an empty graph. For every item in the graph dictionary, I add the edges. Then I get a list of all of the edges and add it create a dataframe where the indices are the from_node, the columns are the to_node, and the values are the edges. I create an empty dictionary where the output will be and a set with the first index of the dataframe. I make sure all the column values are not there. I find the smallest edge that connects another node to the first node/index of the dataframe. I create a function that adds the nodes and edges to the dictionary, puts NaN for the rows of the two nodes, and adds the nodes to the set. I create a loop that runs until all the nodes are in the final dictionary. The loop takes a subset of the dataframe's columns that are in the set, finds the minimum value within the subset, and finds the index and column where the minimum value occurs. Then it uses the earlier function to add the nodes to the dictionary, set, and NaN for the rows. 
Efficiency(time): There is one line of code run once O(1), a for loop that runs one line for every item, n, in the dictionary's n keys, O(n^2+1). Then, there are seven more lines of code run once O(n^2+8). A function with a maximum 8 lines of code will run n-1 times, O(n^2+8n). The while loop will run n-2 times at maximum. It has three lines of code and runs a function that runs three lines of code for all values in a 2*2,3*3...n-1*n-1 matrix. Therefore O(n^2+8n+(n-2)(3+3*summation(n^2, from 2, to n-1)))=O(n^2+8n+(n-2)(3*summation(n^2, from 1, to n-1)))=O(n^2+8n+(n-2)(n*(n-1)(2n-1)/2))= approximately O(n^4). Then it returns the dictionary with one line, so O(n^4).
Efficiency(space): There is one graph with at most n^2 total entries, a list of edges with maximum n^2 entries, a n*n dataframe, a dictionary with n indices, a set with n objects, and other single valued variables or smaller dataframes. Therefore, the space is given by O(n^2).
*Python libraries numpy and random and math and pandas, also Python file class_graph.py (attachment given) needed and imported to run the code.

Question 4: Find the least common ancestor between two nodes on a binary search tree. The least common ancestor is the farthest node from the root that is an ancestor of both nodes. For example, the root is a common ancestor of all nodes on the tree, but if both nodes are descendents of the root's left child, then that left child might be the lowest common ancestor. You can assume that both nodes are in the tree, and the tree itself adheres to all BST properties. The function definition should look like question4(T, r, n1, n2), where T is the tree represented as a matrix, where the index of the list is equal to the integer stored in that node and a 1 represents a child node, r is a non-negative integer representing the root, and n1 and n2 are non-negative integers representing the two nodes in no particular order. For example, one test case might be
question4([[0, 1, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [1, 0, 0, 0, 1],
           [0, 0, 0, 0, 0]],
          3,
          1,
          4)
and the answer would be 3.
Answer: Create two sets, one for each node. Put the node in its set. Create veriables that maintain the lowest level of both sets. Create a loop that does not stop until the intersection of the two sets is not empty. For each set, the loop finds the parent of the lowest level node and puts the parent in the set. Once the loop is finished, return the node that is the intersection of the two sets. This is the least common ancestor.
Efficiency(time): Assume the tree is connected. The first 5 lines of code only need to be run once, so O(5). Worst case scenario, the while loop will run n-1 times, where n*n is the size of the matrix. There are five lines of code processed in the while loop for each iteration so O(5+5*(n-1))=O(5n). Then there is the last return line, so O(5n+1)=O(n).
Efficiency(space): Only created two sets (max n) and two variables that maintain the levels (2), so the worst case efficiency for space is O(n)
*Python library numpy needed and imported to run the code.

Question 5: Find the element in a singly linked list that's m elements from the end. For example, if a linked list has 5 elements, the 3rd element from the end is the 3rd element. The function definition should look like question5(ll, m), where ll is the first node of a linked list and m is the "mth number from the end". You should copy/paste the Node class below to use as a representation of a node in the linked list. Return the value of the node at that position.
class Node(object):
  def __init__(self, data):
    self.data = data
    self.next = None
Answer: The Node class along with the LinkedList class is contained in the file linked_list.py, which is needed and imported to complete question 5. I set up a counter and find the head of my linked list. Then I use a loop to continue to go to the next node while adding to my counter. I now have the number of nodes in the linked list. I use the get position function to get the position and then value of the difference between the counter and m+1.
Efficiency(time): Assume 0<m<=n where n is the number of nodes in the linked list. The function goes through four lines of code before reaching the while loop. So O(4). The while loop runs n-1 times with two lines, so O(4+2*(n-1))=O(2n+2). Two lines of code are processed after that so O(2n+4). But the last line also has a get_position function in the line, so the efficiency of that function must be calculated. In the worst case scenario, you are getting the data from the last node. The first three lines of code in the get_position function only need to be run once, so O(2n+7). The while loop runs n-1 times. For n-2 times, there are three lines of code that only need to be run once, so O(2n+7+3*(n-2))=O(5n+1). The last loop in the while loop runs two lines, so O(5n+3)=O(n). 
Efficiency(space): The counter (1), current (1), so O(1).
*Python file class_graph.py (attachment given) needed and imported to run the code.